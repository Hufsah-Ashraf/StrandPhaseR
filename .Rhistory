cell.hap1 <- hap1.cells.srt[i,]
cell.hap2 <- hap2.cells.srt[i,]
names(cell.hap1) <- gen.positions
names(cell.hap2) <- gen.positions
cell.ID <- strsplit(hap1.cells.names[i], split = "\\.")[[1]][1]
#filter only covered SNV in a given cell and given haplotype
cell.hap1 <- cell.hap1[cell.hap1 != 0]
cell.hap2 <- cell.hap2[cell.hap2 != 0]
#compara haps per SNV position
#cell.hap1.comp <- rep(0, length(cell.hap1))
#cell.hap1.comp[ cell.hap1 == hap1.cons.code[names(cell.hap1)] ] <- 1
#cell.hap1.comp[ cell.hap1 == hap2.cons.code[names(cell.hap1)] ] <- 2
#cell.hap2.comp <- rep(0, length(cell.hap2))
#cell.hap2.comp[ cell.hap2 == hap1.cons.code[names(cell.hap2)] ] <- 1
#cell.hap2.comp[ cell.hap2 == hap2.cons.code[names(cell.hap2)] ] <- 2
#prepara data frame structure to compare single cell haplotypes
hap1.comp <- data.frame(cell.hap1=cell.hap1, cons.hap1=hap1.cons.code[names(cell.hap1)], cons.hap2=hap2.cons.code[names(cell.hap1)])
hap1.comp <- hap1.comp[complete.cases(hap1.comp),]
hap2.comp <- data.frame(cell.hap2=cell.hap2, cons.hap1=hap1.cons.code[names(cell.hap2)], cons.hap2=hap2.cons.code[names(cell.hap2)])
hap2.comp <- hap2.comp[complete.cases(hap2.comp),]
#per position haplotype comparison
#hap1.perPos.comp <- re
#hap1.comp$cell.hap1 == hap1.comp$cons.hap1
#binned haplotype comparison
if (nrow(hap1.comp) >= bin.size) {
cons1.simil <- rollapply(hap1.comp, width = bin.size, by=step, by.column = F, FUN=getSingleCellSimil)
} else {
cons1.simil <- getSingleCellSimil(hap1.comp)
}
if (nrow(hap2.comp) >= bin.size) {
cons2.simil <- rollapply(hap2.comp, width = bin.size, by=step, by.column = F, FUN=getSingleCellSimil)
} else {
cons2.simil <- getSingleCellSimil(hap2.comp)
}
cons1.simil <- as.data.frame(cons1.simil)
cons2.simil <- as.data.frame(cons2.simil)
cons1.simil$hap <- 'H1'
cons2.simil$hap <- 'H2'
cell.comp <- rbind(cons1.simil, cons2.simil)
cell.comp$CellID <- paste(cell.ID, cell.comp$hap, sep = "_")
cell.comparisons[[i]] <- cell.comp
}
cell.comparisons[[115]]
cell.comparisons[[116]]
cell.comparisons[[117]]
compareSingleCellHaps <- function(consesusHaps=NULL, sortedHaps=NULL, bin.size=5, step=1) {
message(" Scanning single-cell haplotypes", appendLF=F); ptm <- proc.time()
#helper function
getSingleCellSimil <- function(df) {
cell.hap <- df[,1]
hap1.cons <- df[,2]
hap2.cons <- df[,3]
#cell.hap.string <- paste(chartr("1234", "ACGT", cell.hap), collapse = "") [SLOW]
#hap1.cons.string <- paste(chartr("1234", "ACGT", hap1.cons), collapse = "") [SLOW]
#hap2.cons.string <- paste(chartr("1234", "ACGT", hap2.cons), collapse = "") [SLOW]
agree.hap1 <- length(cell.hap[cell.hap == hap1.cons])
agree.hap1.perc <- as.numeric(agree.hap1/length(cell.hap))
agree.hap2 <- length(cell.hap[cell.hap == hap2.cons])
agree.hap2.perc <- as.numeric(agree.hap2/length(cell.hap))
#df.new <- data.frame(start=min(as.numeric(rownames(df))), end=max(as.numeric(rownames(df))), cell.hap=cell.hap.string, hap1.cons=hap1.cons.string, hap2.cons=hap2.cons.string, cons1.simil=agree.hap1.perc, cons2.simil=agree.hap2.perc)
df.new <- data.frame(start=min(as.numeric(rownames(df))), end=max(as.numeric(rownames(df))), cons1.simil=agree.hap1.perc, cons2.simil=agree.hap2.perc)
return(df.new)
}
#get the required data
hap1.cons <- consesusHaps$hap1.cons
hap2.cons <- consesusHaps$hap2.cons
hap1.cells.srt <- sortedHaps$hap1.bases
hap2.cells.srt <- sortedHaps$hap2.bases
hap1.cells.names <- sortedHaps$hap1.files
hap2.cells.names <- sortedHaps$hap2.files
gen.positions <- sortedHaps$genomic.pos
#convert consensus bases to numbers
hap1.cons.code <- as.numeric(chartr("ACGT", "1234", hap1.cons$bases))
hap2.cons.code <- as.numeric(chartr("ACGT", "1234", hap2.cons$bases))
names(hap1.cons.code) <- hap1.cons$pos
names(hap2.cons.code) <- hap2.cons$pos
cell.comparisons <- list()
cell.haps.allSNVs <- list()
for (i in 1:nrow(hap1.cells.srt)) {
cell.hap1 <- hap1.cells.srt[i,]
cell.hap2 <- hap2.cells.srt[i,]
names(cell.hap1) <- gen.positions
names(cell.hap2) <- gen.positions
cell.ID <- strsplit(hap1.cells.names[i], split = "\\.")[[1]][1]
#filter only covered SNV in a given cell and given haplotype
cell.hap1 <- cell.hap1[cell.hap1 != 0]
cell.hap2 <- cell.hap2[cell.hap2 != 0]
#compara haps per SNV position
#cell.hap1.comp <- rep(0, length(cell.hap1))
#cell.hap1.comp[ cell.hap1 == hap1.cons.code[names(cell.hap1)] ] <- 1
#cell.hap1.comp[ cell.hap1 == hap2.cons.code[names(cell.hap1)] ] <- 2
#cell.hap2.comp <- rep(0, length(cell.hap2))
#cell.hap2.comp[ cell.hap2 == hap1.cons.code[names(cell.hap2)] ] <- 1
#cell.hap2.comp[ cell.hap2 == hap2.cons.code[names(cell.hap2)] ] <- 2
#prepara data frame structure to compare single cell haplotypes
hap1.comp <- data.frame(cell.hap1=cell.hap1, cons.hap1=hap1.cons.code[names(cell.hap1)], cons.hap2=hap2.cons.code[names(cell.hap1)])
hap1.comp <- hap1.comp[complete.cases(hap1.comp),]
hap2.comp <- data.frame(cell.hap2=cell.hap2, cons.hap1=hap1.cons.code[names(cell.hap2)], cons.hap2=hap2.cons.code[names(cell.hap2)])
hap2.comp <- hap2.comp[complete.cases(hap2.comp),]
#per position haplotype comparison
#hap1.perPos.comp <- re
#hap1.comp$cell.hap1 == hap1.comp$cons.hap1
#binned haplotype comparison
if (nrow(hap1.comp) >= bin.size) {
cons1.simil <- rollapply(hap1.comp, width = bin.size, by=step, by.column = F, FUN=getSingleCellSimil)
} else {
cons1.simil <- getSingleCellSimil(hap1.comp)
}
if (nrow(hap2.comp) >= bin.size) {
cons2.simil <- rollapply(hap2.comp, width = bin.size, by=step, by.column = F, FUN=getSingleCellSimil)
} else {
cons2.simil <- getSingleCellSimil(hap2.comp)
}
cons1.simil <- as.data.frame(cons1.simil)
cons2.simil <- as.data.frame(cons2.simil)
cons1.simil$hap <- 'H1'
cons2.simil$hap <- 'H2'
cell.comp <- rbind(cons1.simil, cons2.simil)
cell.comp$CellID <- paste(cell.ID, cell.comp$hap, sep = "_")
cell.comparisons[[i]] <- cell.comp
}
#cell.comparisons.df <- do.call(rbind, cell.comparisons)
time <- proc.time() - ptm; message(" ",round(time[3],2),"s")
return(cell.comparisons)
}
cell.comparisons.df <- compareSingleCellHaps(consesusHaps=assem.haps, sortedHaps=srt.matrices, bin.size=5, step=1)
data.object=cell.comparisons.df
all.segments <- GRangesList()
length(data.object)
i <- 1
names(data.object[i])
cell.data <- data.object[[i]]
cell.data
split(cell.data, cell.data$CellID)
cell.haps <- split(cell.data, cell.data$CellID)
length(cell.haps)
cell.data <- data.object[[i]]
cell.haps <- split(cell.data, cell.data$CellID)
if (length(cell.haps)<2) {next}
cell.comparison.H1 <- cell.haps[[1]]
cell.comparison.H2 <- cell.haps[[2]]
cell.comparison.H1
cell.comparison.H2
cell.comparison.H1.id <- names(cell.haps[1])
cell.id <- gsub(cell.comparison.H1.id, pattern = "_H1", replacement = "")
cell.id
LOHseeker <- function(data.object=NULL, chromosome=NULL) {
message(" Searching for LOH", appendLF=F); ptm <- proc.time()
all.segments <- GRangesList()
for (i in 1:length(data.object)) {
#get data
cell.data <- data.object[[i]]
cell.haps <- split(cell.data, cell.data$CellID)
if (length(cell.haps)<2) {next}
cell.comparison.H1 <- cell.haps[[1]]
cell.comparison.H2 <- cell.haps[[2]]
#get cell ID
cell.comparison.H1.id <- names(cell.haps[1])
cell.id <- gsub(cell.comparison.H1.id, pattern = "_H1", replacement = "")
#segmentation
H1.segs <- fastseg::fastseg(cell.comparison.H1$cons1.simil, segMedianT = 0.5) #comparing only to one consesus hap because the other is the complete mirror
H2.segs <- fastseg::fastseg(cell.comparison.H2$cons1.simil, segMedianT = 0.5)
#filter segments with mean similarity values in between 0.1 and 0.9
H1.segs <- H1.segs[H1.segs$seg.mean < 0.1 | H1.segs$seg.mean > 0.9]
H2.segs <- H2.segs[H2.segs$seg.mean < 0.1 | H2.segs$seg.mean > 0.9]
if (length(H1.segs)>0 & length(H2.segs)>0) {
#get genomic positions of localized segments
H1.segs.ranges <- ranges(H1.segs)
H2.segs.ranges <- ranges(H2.segs)
H1.starts <- cell.comparison.H1$start[start(H1.segs.ranges)]
H1.ends <- cell.comparison.H1$end[end(H1.segs.ranges)]
H2.starts <- cell.comparison.H2$start[start(H2.segs.ranges)]
H2.ends <- cell.comparison.H2$end[end(H2.segs.ranges)]
#get haplotype for each segment (simil close to 1 means that given haplotype belongs to compared consesusHap1 or vice versa)
H1.segs.haps <- ifelse(H1.segs$seg.mean > 0.9, "H1", ifelse(H1.segs$seg.mean < 0.1, 'H2', 'NA'))
H2.segs.haps <- ifelse(H2.segs$seg.mean > 0.9, "H1", ifelse(H2.segs$seg.mean < 0.1, 'H2', 'NA'))
#create GRanges object of loacalized segments
H1.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H1.starts, end=H1.ends), exp.Hap="H1", obs.Hap=H1.segs.haps, ID=cell.id)
H2.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H2.starts, end=H2.ends), exp.Hap="H2", obs.Hap=H2.segs.haps, ID=cell.id)
cell.segments <- c(H1.segments, H2.segments)
all.segments[[cell.id]] <- cell.segments
}
}
all.segments.gr <- unlist(all.segments)
time <- proc.time() - ptm; message(" ",round(time[3],2),"s")
return(all.segments.gr)
}
LOH.regions <- LOHseeker(data.object=cell.comparisons.df, chromosome=chromosome)
LOH.regions
LOH.regions.df <- data.frame(LOH.regions)
LOH.regions.df
table(LOH.regions.df$exp.Hap != LOH.regions.df$obs.Hap)
LOH.regions.df$ID[LOH.regions.df$exp.Hap != LOH.regions.df$obs.Hap]
LOHseeker <- function(data.object=NULL, chromosome=NULL) {
message(" Searching for LOH", appendLF=F); ptm <- proc.time()
all.segments <- GRangesList()
for (i in 1:length(data.object)) {
#get data
cell.data <- data.object[[i]]
cell.haps <- split(cell.data, cell.data$CellID)
if (length(cell.haps)<2) {next}
cell.comparison.H1 <- cell.haps[[1]]
cell.comparison.H2 <- cell.haps[[2]]
#get cell ID
cell.comparison.H1.id <- names(cell.haps[1])
cell.id <- gsub(cell.comparison.H1.id, pattern = "_H1", replacement = "")
#segmentation
H1.segs <- fastseg::fastseg(cell.comparison.H1$cons1.simil, minSeg = 5, segMedianT = 0.5) #comparing only to one consesus hap because the other is the complete mirror
H2.segs <- fastseg::fastseg(cell.comparison.H2$cons1.simil, minSeg = 5, segMedianT = 0.5)
#filter segments with mean similarity values in between 0.1 and 0.9
H1.segs <- H1.segs[H1.segs$seg.mean < 0.1 | H1.segs$seg.mean > 0.9]
H2.segs <- H2.segs[H2.segs$seg.mean < 0.1 | H2.segs$seg.mean > 0.9]
if (length(H1.segs)>0 & length(H2.segs)>0) {
#get genomic positions of localized segments
H1.segs.ranges <- ranges(H1.segs)
H2.segs.ranges <- ranges(H2.segs)
H1.starts <- cell.comparison.H1$start[start(H1.segs.ranges)]
H1.ends <- cell.comparison.H1$end[end(H1.segs.ranges)]
H2.starts <- cell.comparison.H2$start[start(H2.segs.ranges)]
H2.ends <- cell.comparison.H2$end[end(H2.segs.ranges)]
#get haplotype for each segment (simil close to 1 means that given haplotype belongs to compared consesusHap1 or vice versa)
H1.segs.haps <- ifelse(H1.segs$seg.mean > 0.9, "H1", ifelse(H1.segs$seg.mean < 0.1, 'H2', 'NA'))
H2.segs.haps <- ifelse(H2.segs$seg.mean > 0.9, "H1", ifelse(H2.segs$seg.mean < 0.1, 'H2', 'NA'))
#create GRanges object of loacalized segments
H1.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H1.starts, end=H1.ends), exp.Hap="H1", obs.Hap=H1.segs.haps, ID=cell.id)
H2.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H2.starts, end=H2.ends), exp.Hap="H2", obs.Hap=H2.segs.haps, ID=cell.id)
cell.segments <- c(H1.segments, H2.segments)
all.segments[[cell.id]] <- cell.segments
}
}
all.segments.gr <- unlist(all.segments)
time <- proc.time() - ptm; message(" ",round(time[3],2),"s")
return(all.segments.gr)
}
LOH.regions <- LOHseeker(data.object=cell.comparisons.df, chromosome=chromosome)
LOH.regions.df$ID[LOH.regions.df$exp.Hap != LOH.regions.df$obs.Hap]
LOHseeker <- function(data.object=NULL, chromosome=NULL) {
message(" Searching for LOH", appendLF=F); ptm <- proc.time()
all.segments <- GRangesList()
for (i in 1:length(data.object)) {
#get data
cell.data <- data.object[[i]]
cell.haps <- split(cell.data, cell.data$CellID)
if (length(cell.haps)<2) {next}
cell.comparison.H1 <- cell.haps[[1]]
cell.comparison.H2 <- cell.haps[[2]]
#get cell ID
cell.comparison.H1.id <- names(cell.haps[1])
cell.id <- gsub(cell.comparison.H1.id, pattern = "_H1", replacement = "")
#segmentation
H1.segs <- fastseg::fastseg(cell.comparison.H1$cons1.simil, minSeg = 10, segMedianT = 0.5) #comparing only to one consesus hap because the other is the complete mirror
H2.segs <- fastseg::fastseg(cell.comparison.H2$cons1.simil, minSeg = 10, segMedianT = 0.5)
#filter segments with mean similarity values in between 0.1 and 0.9
H1.segs <- H1.segs[H1.segs$seg.mean < 0.1 | H1.segs$seg.mean > 0.9]
H2.segs <- H2.segs[H2.segs$seg.mean < 0.1 | H2.segs$seg.mean > 0.9]
if (length(H1.segs)>0 & length(H2.segs)>0) {
#get genomic positions of localized segments
H1.segs.ranges <- ranges(H1.segs)
H2.segs.ranges <- ranges(H2.segs)
H1.starts <- cell.comparison.H1$start[start(H1.segs.ranges)]
H1.ends <- cell.comparison.H1$end[end(H1.segs.ranges)]
H2.starts <- cell.comparison.H2$start[start(H2.segs.ranges)]
H2.ends <- cell.comparison.H2$end[end(H2.segs.ranges)]
#get haplotype for each segment (simil close to 1 means that given haplotype belongs to compared consesusHap1 or vice versa)
H1.segs.haps <- ifelse(H1.segs$seg.mean > 0.9, "H1", ifelse(H1.segs$seg.mean < 0.1, 'H2', 'NA'))
H2.segs.haps <- ifelse(H2.segs$seg.mean > 0.9, "H1", ifelse(H2.segs$seg.mean < 0.1, 'H2', 'NA'))
#create GRanges object of loacalized segments
H1.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H1.starts, end=H1.ends), exp.Hap="H1", obs.Hap=H1.segs.haps, ID=cell.id)
H2.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H2.starts, end=H2.ends), exp.Hap="H2", obs.Hap=H2.segs.haps, ID=cell.id)
cell.segments <- c(H1.segments, H2.segments)
all.segments[[cell.id]] <- cell.segments
}
}
all.segments.gr <- unlist(all.segments)
time <- proc.time() - ptm; message(" ",round(time[3],2),"s")
return(all.segments.gr)
}
LOH.regions <- LOHseeker(data.object=cell.comparisons.df, chromosome=chromosome)
LOH.regions.df$ID[LOH.regions.df$exp.Hap != LOH.regions.df$obs.Hap]
names(cell.comparisons.df)
cell.comparisons.df
cell.comparisons.df[[23]]
cell.comparisons.df[[18]]
cell.comparisons.df[[19]]
cell.comparisons.df[[14]]
cell.comparisons.df[[17]]
cell.comparisons.df[[19]]
cell.comparisons.df[[1]]
cell.comparisons.df[[2]]
cell.comparisons.df[[3]]
cell.comparisons.df[[4]]
cell.comparisons.df[[5]]
cell.comparisons.df[[6]]
cell.comparisons.df[[7]]
cell.comparisons.df[[8]]
cell.comparisons.df[[9]]
cell.comparisons.df[[10]]
plot(cell.comparisons.df[[10]]$cons1.simil)
plot(cell.comparisons.df[[10]]$cons2.simil)
tail(cell.comparisons.df[[10]]$cons1.simil)
tail(cell.comparisons.df[[10]])
cell.comparisons.df[[10]]$cons1.simil[1800:2000]
cell.comparisons.df[[10]]$cons1.simil[1500:2000]
cell.comparisons.df[[10]][1500:2000]
cell.comparisons.df[[10]][1500:2000,]
cell.comparisons.df[[10]][1600:2000,]
cell.comparisons.df[[10]][2600:3000,]
cell.comparisons.l <- compareSingleCellHaps(consesusHaps=assem.haps, sortedHaps=srt.matrices, bin.size=10, step=1)
plt.df <- melt(cell.comparisons.df, measure.vars = c('cons1.simil','cons2.simil'))
plt <- ggplot(plt.df, aes(y=value,x=start, color=variable)) + geom_step()  + facet_grid(CellID ~ .) + theme_bw() + theme(strip.text.y = element_text(angle=0), axis.ticks.y=element_blank(), axis.text.y=element_blank()) + scale_color_manual(values = c("darkgoldenrod1", "dodgerblue2"))
destination <- file.path(singlecell.store, paste0(chromosome, '_singleCellHaps.pdf'))
suppressMessages( ggsave(destination, plot=plt, device="pdf", width=10, height=length(unique(plt.df$CellID))*0.5, limitsize=F) )
plt.df <- melt(cell.comparisons.l, measure.vars = c('cons1.simil','cons2.simil'))
plt <- ggplot(plt.df, aes(y=value,x=start, color=variable)) + geom_step()  + facet_grid(CellID ~ .) + theme_bw() + theme(strip.text.y = element_text(angle=0), axis.ticks.y=element_blank(), axis.text.y=element_blank()) + scale_color_manual(values = c("darkgoldenrod1", "dodgerblue2"))
destination <- file.path(singlecell.store, paste0(chromosome, '_singleCellHaps.pdf'))
suppressMessages( ggsave(destination, plot=plt, device="pdf", width=10, height=length(unique(plt.df$CellID))*0.5, limitsize=F) )
LOH.regions <- LOHseeker(data.object=cell.comparisons.l, chromosome=chromosome, bin)
LOH.regions.df <- data.frame(LOH.regions)
LOH.regions <- LOHseeker(data.object=cell.comparisons.l, chromosome=chromosome)
LOH.regions.df <- data.frame(LOH.regions)
LOH.regions.df$ID[LOH.regions.df$exp.Hap != LOH.regions.df$obs.Hap]
cell.comparison.H1
LOHseeker <- function(data.object=NULL, chromosome=NULL, bin.size=10) {
message(" Searching for LOH", appendLF=F); ptm <- proc.time()
all.segments <- GRangesList()
for (i in 1:length(data.object)) {
#get data
cell.data <- data.object[[i]]
cell.haps <- split(cell.data, cell.data$CellID)
if (length(cell.haps) < 2) {next}
cell.comparison.H1 <- cell.haps[[1]]
cell.comparison.H2 <- cell.haps[[2]]
if (nrow(cell.comparison.H1) < bin.size | nrow(cell.comparison.H2 < bin.size)) {next}
#get cell ID
cell.comparison.H1.id <- names(cell.haps[1])
cell.id <- gsub(cell.comparison.H1.id, pattern = "_H1", replacement = "")
#segmentation
H1.segs <- fastseg::fastseg(cell.comparison.H1$cons1.simil, segMedianT = 0.5) #comparing only to one consesus hap because the other is the complete mirror
H2.segs <- fastseg::fastseg(cell.comparison.H2$cons1.simil, segMedianT = 0.5)
#filter segments with mean similarity values in between 0.1 and 0.9
H1.segs <- H1.segs[H1.segs$seg.mean < 0.1 | H1.segs$seg.mean > 0.9]
H2.segs <- H2.segs[H2.segs$seg.mean < 0.1 | H2.segs$seg.mean > 0.9]
if (length(H1.segs)>0 & length(H2.segs)>0) {
#get genomic positions of localized segments
H1.segs.ranges <- ranges(H1.segs)
H2.segs.ranges <- ranges(H2.segs)
H1.starts <- cell.comparison.H1$start[start(H1.segs.ranges)]
H1.ends <- cell.comparison.H1$end[end(H1.segs.ranges)]
H2.starts <- cell.comparison.H2$start[start(H2.segs.ranges)]
H2.ends <- cell.comparison.H2$end[end(H2.segs.ranges)]
#get haplotype for each segment (simil close to 1 means that given haplotype belongs to compared consesusHap1 or vice versa)
H1.segs.haps <- ifelse(H1.segs$seg.mean > 0.9, "H1", ifelse(H1.segs$seg.mean < 0.1, 'H2', 'NA'))
H2.segs.haps <- ifelse(H2.segs$seg.mean > 0.9, "H1", ifelse(H2.segs$seg.mean < 0.1, 'H2', 'NA'))
#create GRanges object of loacalized segments
H1.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H1.starts, end=H1.ends), exp.Hap="H1", obs.Hap=H1.segs.haps, ID=cell.id)
H2.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H2.starts, end=H2.ends), exp.Hap="H2", obs.Hap=H2.segs.haps, ID=cell.id)
cell.segments <- c(H1.segments, H2.segments)
all.segments[[cell.id]] <- cell.segments
}
}
all.segments.gr <- unlist(all.segments)
time <- proc.time() - ptm; message(" ",round(time[3],2),"s")
return(all.segments.gr)
}
LOH.regions <- LOHseeker(data.object=cell.comparisons.l, chromosome=chromosome, bin.size=10)
LOH.regions
data.object=cell.comparisons.l
i <- 1
#get data
cell.data <- data.object[[i]]
cell.haps <- split(cell.data, cell.data$CellID)
if (length(cell.haps) < 2) {next}
cell.comparison.H1 <- cell.haps[[1]]
cell.comparison.H2 <- cell.haps[[2]]
nrow(cell.comparison.H1) < bin.size
bin.size=10
nrow(cell.comparison.H1) < bin.size
nrow(cell.comparison.H1)
nrow(cell.comparison.H1) < bin.size | nrow(cell.comparison.H2 < bin.size)
nrow(cell.comparison.H1) < bin.size
nrow(cell.comparison.H2 < bin.size)
(nrow(cell.comparison.H1) < bin.size | nrow(cell.comparison.H2) < bin.size)
LOHseeker <- function(data.object=NULL, chromosome=NULL, bin.size=10) {
message(" Searching for LOH", appendLF=F); ptm <- proc.time()
all.segments <- GRangesList()
for (i in 1:length(data.object)) {
#get data
cell.data <- data.object[[i]]
cell.haps <- split(cell.data, cell.data$CellID)
if (length(cell.haps) < 2) {next}
cell.comparison.H1 <- cell.haps[[1]]
cell.comparison.H2 <- cell.haps[[2]]
if (nrow(cell.comparison.H1) < bin.size | nrow(cell.comparison.H2) < bin.size) {next}
#get cell ID
cell.comparison.H1.id <- names(cell.haps[1])
cell.id <- gsub(cell.comparison.H1.id, pattern = "_H1", replacement = "")
#segmentation
H1.segs <- fastseg::fastseg(cell.comparison.H1$cons1.simil, segMedianT = 0.5) #comparing only to one consesus hap because the other is the complete mirror
H2.segs <- fastseg::fastseg(cell.comparison.H2$cons1.simil, segMedianT = 0.5)
#filter segments with mean similarity values in between 0.1 and 0.9
H1.segs <- H1.segs[H1.segs$seg.mean < 0.1 | H1.segs$seg.mean > 0.9]
H2.segs <- H2.segs[H2.segs$seg.mean < 0.1 | H2.segs$seg.mean > 0.9]
if (length(H1.segs)>0 & length(H2.segs)>0) {
#get genomic positions of localized segments
H1.segs.ranges <- ranges(H1.segs)
H2.segs.ranges <- ranges(H2.segs)
H1.starts <- cell.comparison.H1$start[start(H1.segs.ranges)]
H1.ends <- cell.comparison.H1$end[end(H1.segs.ranges)]
H2.starts <- cell.comparison.H2$start[start(H2.segs.ranges)]
H2.ends <- cell.comparison.H2$end[end(H2.segs.ranges)]
#get haplotype for each segment (simil close to 1 means that given haplotype belongs to compared consesusHap1 or vice versa)
H1.segs.haps <- ifelse(H1.segs$seg.mean > 0.9, "H1", ifelse(H1.segs$seg.mean < 0.1, 'H2', 'NA'))
H2.segs.haps <- ifelse(H2.segs$seg.mean > 0.9, "H1", ifelse(H2.segs$seg.mean < 0.1, 'H2', 'NA'))
#create GRanges object of loacalized segments
H1.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H1.starts, end=H1.ends), exp.Hap="H1", obs.Hap=H1.segs.haps, ID=cell.id)
H2.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H2.starts, end=H2.ends), exp.Hap="H2", obs.Hap=H2.segs.haps, ID=cell.id)
cell.segments <- c(H1.segments, H2.segments)
all.segments[[cell.id]] <- cell.segments
}
}
all.segments.gr <- unlist(all.segments)
time <- proc.time() - ptm; message(" ",round(time[3],2),"s")
return(all.segments.gr)
}
LOH.regions <- LOHseeker(data.object=cell.comparisons.l, chromosome=chromosome, bin.size=10)
LOH.regions.df$ID[LOH.regions.df$exp.Hap != LOH.regions.df$obs.Hap]
names(data.object)
all.segments <- GRangesList()
for (i in 1:length(data.object)) {
#get data
cell.data <- data.object[[i]]
cell.haps <- split(cell.data, cell.data$CellID)
if (length(cell.haps) < 2) {next}
cell.comparison.H1 <- cell.haps[[1]]
cell.comparison.H2 <- cell.haps[[2]]
if (nrow(cell.comparison.H1) < bin.size | nrow(cell.comparison.H2) < bin.size) {next}
#get cell ID
cell.comparison.H1.id <- names(cell.haps[1])
cell.id <- gsub(cell.comparison.H1.id, pattern = "_H1", replacement = "")
print(i, cell.id)
#segmentation
H1.segs <- fastseg::fastseg(cell.comparison.H1$cons1.simil, segMedianT = 0.5) #comparing only to one consesus hap because the other is the complete mirror
H2.segs <- fastseg::fastseg(cell.comparison.H2$cons1.simil, segMedianT = 0.5)
#filter segments with mean similarity values in between 0.1 and 0.9
H1.segs <- H1.segs[H1.segs$seg.mean < 0.1 | H1.segs$seg.mean > 0.9]
H2.segs <- H2.segs[H2.segs$seg.mean < 0.1 | H2.segs$seg.mean > 0.9]
if (length(H1.segs)>0 & length(H2.segs)>0) {
#get genomic positions of localized segments
H1.segs.ranges <- ranges(H1.segs)
H2.segs.ranges <- ranges(H2.segs)
H1.starts <- cell.comparison.H1$start[start(H1.segs.ranges)]
H1.ends <- cell.comparison.H1$end[end(H1.segs.ranges)]
H2.starts <- cell.comparison.H2$start[start(H2.segs.ranges)]
H2.ends <- cell.comparison.H2$end[end(H2.segs.ranges)]
#get haplotype for each segment (simil close to 1 means that given haplotype belongs to compared consesusHap1 or vice versa)
H1.segs.haps <- ifelse(H1.segs$seg.mean > 0.9, "H1", ifelse(H1.segs$seg.mean < 0.1, 'H2', 'NA'))
H2.segs.haps <- ifelse(H2.segs$seg.mean > 0.9, "H1", ifelse(H2.segs$seg.mean < 0.1, 'H2', 'NA'))
#create GRanges object of loacalized segments
H1.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H1.starts, end=H1.ends), exp.Hap="H1", obs.Hap=H1.segs.haps, ID=cell.id)
H2.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H2.starts, end=H2.ends), exp.Hap="H2", obs.Hap=H2.segs.haps, ID=cell.id)
cell.segments <- c(H1.segments, H2.segments)
all.segments[[cell.id]] <- cell.segments
}
}
all.segments <- GRangesList()
for (i in 1:length(data.object)) {
#get data
cell.data <- data.object[[i]]
cell.haps <- split(cell.data, cell.data$CellID)
if (length(cell.haps) < 2) {next}
cell.comparison.H1 <- cell.haps[[1]]
cell.comparison.H2 <- cell.haps[[2]]
if (nrow(cell.comparison.H1) < bin.size | nrow(cell.comparison.H2) < bin.size) {next}
#get cell ID
cell.comparison.H1.id <- names(cell.haps[1])
cell.id <- gsub(cell.comparison.H1.id, pattern = "_H1", replacement = "")
print(i)
print(cell.id)
#segmentation
H1.segs <- fastseg::fastseg(cell.comparison.H1$cons1.simil, segMedianT = 0.5) #comparing only to one consesus hap because the other is the complete mirror
H2.segs <- fastseg::fastseg(cell.comparison.H2$cons1.simil, segMedianT = 0.5)
#filter segments with mean similarity values in between 0.1 and 0.9
H1.segs <- H1.segs[H1.segs$seg.mean < 0.1 | H1.segs$seg.mean > 0.9]
H2.segs <- H2.segs[H2.segs$seg.mean < 0.1 | H2.segs$seg.mean > 0.9]
if (length(H1.segs)>0 & length(H2.segs)>0) {
#get genomic positions of localized segments
H1.segs.ranges <- ranges(H1.segs)
H2.segs.ranges <- ranges(H2.segs)
H1.starts <- cell.comparison.H1$start[start(H1.segs.ranges)]
H1.ends <- cell.comparison.H1$end[end(H1.segs.ranges)]
H2.starts <- cell.comparison.H2$start[start(H2.segs.ranges)]
H2.ends <- cell.comparison.H2$end[end(H2.segs.ranges)]
#get haplotype for each segment (simil close to 1 means that given haplotype belongs to compared consesusHap1 or vice versa)
H1.segs.haps <- ifelse(H1.segs$seg.mean > 0.9, "H1", ifelse(H1.segs$seg.mean < 0.1, 'H2', 'NA'))
H2.segs.haps <- ifelse(H2.segs$seg.mean > 0.9, "H1", ifelse(H2.segs$seg.mean < 0.1, 'H2', 'NA'))
#create GRanges object of loacalized segments
H1.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H1.starts, end=H1.ends), exp.Hap="H1", obs.Hap=H1.segs.haps, ID=cell.id)
H2.segments <- GRanges(seqnames=chromosome, ranges=IRanges(start=H2.starts, end=H2.ends), exp.Hap="H2", obs.Hap=H2.segs.haps, ID=cell.id)
cell.segments <- c(H1.segments, H2.segments)
all.segments[[cell.id]] <- cell.segments
}
}
LOH.regions.df$ID[LOH.regions.df$exp.Hap != LOH.regions.df$obs.Hap]
LOH.regions.df <- data.frame(LOH.regions)
LOH.regions.df$ID[LOH.regions.df$exp.Hap != LOH.regions.df$obs.Hap]
unique(LOH.regions.df$ID)
destination <- file.path(singlecell.store, paste0(chromosome, '_singleCell_LOH.txt'))
write.table(LOH.regions.df, file = destination, quote = F, row.names = F)
setwd("/home/daewoooo/StrandPhaseR/")
document()
document()
install()
